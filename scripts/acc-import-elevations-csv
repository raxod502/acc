#!/usr/bin/env python3

import csv
import dateutil.parser
import decimal
import simplejson
import sys
import uuid

def row_to_transaction(row, account):
    (elevations_id, date, desc, memo, debit, credit, balance, check_number,
     fees) = row
    assert elevations_id
    date = dateutil.parser.parse(date).strftime("%Y-%m-%d")
    assert desc
    if not memo:
        memo = None
    assert bool(debit) != bool(credit)
    if debit:
        delta = decimal.Decimal(debit)
        assert delta < 0
    if credit:
        delta = decimal.Decimal(credit)
        assert delta > 0
    delta = decimal.Decimal(delta)
    balance = decimal.Decimal(balance)
    if not check_number:
        check_number = None
    if not fees:
        fees = None
    trans = {
        "uuid": str(uuid.uuid4()),
        "elevations-id": elevations_id,
        "date": date,
        "description": desc,
        "memo": memo,
        "value": abs(delta),
        "balance": balance,
        "check-number": check_number,
        "fees": fees,
    }
    if delta > 0:
        trans["to"] = [account]
        trans["from"] = []
    else:
        trans["to"] = []
        trans["from"] = [account]
    return trans

def usage():
    return """\
This command is used to import a CSV exported from the Elevations Credit Union
web interface into acc format. The imported data is printed to stdout.

usage: acc import-elevations-csv --account <account-name> <filename>"""

def die_with_usage():
    print(usage(), file=sys.stderr)
    sys.exit(1)

def main(args):
    account = None
    filename = None
    while args:
        if args[0] == "--account":
            if len(args) < 2 or account is not None:
                die_with_usage()
            account = args[1]
            args = args[2:]
        else:
            if filename is not None:
                die_with_usage()
            filename = args[0]
            args = args[1:]
    if account is None or filename is None:
        die_with_usage()
    transactions = []
    with open(filename, "r") as f:
        rows = list(csv.reader(f))
        for idx, row in enumerate(rows, 1):
            if idx <= 4:
                continue
            try:
                transactions.append(row_to_transaction(row, account))
            except Exception as e:
                print("Error on row {}, i.e. {}".format(idx, row),
                      file=sys.stderr)
                raise e
    simplejson.dump(transactions, sys.stdout, indent=2, use_decimal=True)
    print()
    sys.exit(0)

if __name__ == "__main__":
    main(sys.argv[1:])
